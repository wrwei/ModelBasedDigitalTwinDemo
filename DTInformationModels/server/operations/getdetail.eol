var matchRepresentations = Model!Representation.all.select(r| r.name == Input.root.itemName);
if (matchRepresentations.size != 1) {
    throw "[User Error] Cannot find " + Input.root.itemName;
}
var representation = matchRepresentations.random();

Output.root.sections = representation.sections.collect(s|s.name);

Output.root.attributeGroup = Sequence {};
Output.root.attributeName = Sequence {};
Output.root.attributeValue = Sequence {};
Output.root.attributeOption = Sequence {};

Output.root.attributeGroup.add("type");
Output.root.attributeName.add(Sequence {"type"});
Output.root.attributeValue.add(Sequence {Sequence {representation.type().name}});
Output.root.attributeOption.add(Sequence {Sequence {}});

if (representation.hasProperty("subtype")) {
    Output.root.attributeGroup.add("subtype");
    Output.root.attributeName.add(Sequence {"subtype"});
    Output.root.attributeValue.add(Sequence {Sequence {representation.subtype.asString()}});
    Output.root.attributeOption.add(Sequence {Sequence {}});
}

if (representation.hasProperty("color")) {
    Output.root.attributeGroup.add("color");
    Output.root.attributeName.add(Sequence {"color"});
    Output.root.attributeValue.add(Sequence {Sequence {representation.color.asString()}});
    Output.root.attributeOption.add(Sequence {representation.color.eEnum.eLiterals.collect(l|l.getLiteral())});
}

if (representation.hasProperty("topMaterial")) {
    Output.root.attributeGroup.add("topMaterial");
    Output.root.attributeName.add(Sequence {"type", "quantity"});
    Output.root.attributeValue.add(representation.topMaterial.collect(m|Sequence{m.type.asString(), m.quantity}));
    Output.root.attributeOption.add(Sequence { representation.defaultMaterial.type.eEnum.eLiterals.collect(l|l.getLiteral()), Sequence{}});
}

if (representation.hasProperty("midMaterial")) {
    Output.root.attributeGroup.add("midMaterial");
    Output.root.attributeName.add(Sequence {"type", "quantity"});
    Output.root.attributeValue.add(representation.midMaterial.collect(m|Sequence{m.type.asString(), m.quantity}));
    Output.root.attributeOption.add(Sequence { representation.defaultMaterial.type.eEnum.eLiterals.collect(l|l.getLiteral()), Sequence{}});
}

if (representation.hasProperty("lowMaterial")) {
    Output.root.attributeGroup.add("lowMaterial");
    Output.root.attributeName.add(Sequence {"type", "quantity"});
    Output.root.attributeValue.add(representation.lowMaterial.collect(m|Sequence{m.type.asString(), m.quantity}));
    Output.root.attributeOption.add(Sequence { representation.defaultMaterial.type.eEnum.eLiterals.collect(l|l.getLiteral()), Sequence{}});
}

if (representation.hasProperty("mesh")) {
    Output.root.attributeGroup.add("mesh");
    Output.root.attributeName.add(Sequence {"file", "x", "y", "z"});
    Output.root.attributeValue.add(Sequence {Sequence {representation.mesh.file, representation.mesh.offset[0], representation.mesh.offset[1], representation.mesh.offset[2]}});
    Output.root.attributeOption.add(Sequence {Sequence {}, Sequence {}, Sequence {}, Sequence {}});
}

if (representation.hasProperty("lanes")) {
    Output.root.attributeGroup.add("lanes");
    Output.root.attributeName.add(Sequence {"lanes"});
    Output.root.attributeValue.add(Sequence {Sequence {representation.lanes}});
    Output.root.attributeOption.add(Sequence {Sequence {}});
}

if (representation.hasProperty("carsPerHour")) {
    Output.root.attributeGroup.add("carsPerHour");
    Output.root.attributeName.add(Sequence {"carsPerHour"});
    Output.root.attributeValue.add(Sequence {Sequence {representation.carsPerHour}});
    Output.root.attributeOption.add(Sequence {Sequence {}});
}

if (representation.hasProperty("span")) {
    Output.root.attributeGroup.add("span");
    Output.root.attributeName.add(Sequence {"span"});
    Output.root.attributeValue.add(Sequence {Sequence {representation.span}});
    Output.root.attributeOption.add(Sequence {Sequence {}});
}